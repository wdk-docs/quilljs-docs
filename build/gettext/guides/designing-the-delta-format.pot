# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the quilljs-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: quilljs-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-18 15:05+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/guides/designing-the-delta-format.rst:2
msgid "designing the delta format"
msgstr "designing the delta format"

#: ../../source/guides/designing-the-delta-format.rst:4
msgid "Rich text editors lack a specification to express its own contents. Until recently, most rich text editors did not even know what was in their own edit areas. These editors just pass the user HTML, along with the burden of parsing and interpretting this. At any given time, this interpretation will differ from those of major browser vendors, leading to different editing experiences for users."
msgstr "Rich text editors lack a specification to express its own contents. Until recently, most rich text editors did not even know what was in their own edit areas. These editors just pass the user HTML, along with the burden of parsing and interpretting this. At any given time, this interpretation will differ from those of major browser vendors, leading to different editing experiences for users."

#: ../../source/guides/designing-the-delta-format.rst:11
msgid "Quill is the first rich text editor to actually understand its own contents. Key to this is Deltas, the specification describing rich text. Deltas are designed to be easy to understand and use. We will walk through some of the thinking behind Deltas, to shed light on *why* things are the way they are."
msgstr "Quill is the first rich text editor to actually understand its own contents. Key to this is Deltas, the specification describing rich text. Deltas are designed to be easy to understand and use. We will walk through some of the thinking behind Deltas, to shed light on *why* things are the way they are."

#: ../../source/guides/designing-the-delta-format.rst:17
msgid "If you are looking for a reference on *what* Deltas are, the `Delta documentation </docs/delta/>`__ is a more concise resource."
msgstr "If you are looking for a reference on *what* Deltas are, the `Delta documentation </docs/delta/>`__ is a more concise resource."

#: ../../source/guides/designing-the-delta-format.rst:21
msgid "Plain Text"
msgstr "Plain Text"

#: ../../source/guides/designing-the-delta-format.rst:23
msgid "Let’s start at the basics with just plain text. There already is a ubiquitous format to store plain text: the string. Now if we want to build upon this and describe formatted text, such as when a range is bold, we need to add additional information."
msgstr "Let’s start at the basics with just plain text. There already is a ubiquitous format to store plain text: the string. Now if we want to build upon this and describe formatted text, such as when a range is bold, we need to add additional information."

#: ../../source/guides/designing-the-delta-format.rst:28
msgid "Arrays are the only other ordered data type available, so we use an array of objects. This also allows us to leverage JSON for compatibility with a breadth of tools."
msgstr "Arrays are the only other ordered data type available, so we use an array of objects. This also allows us to leverage JSON for compatibility with a breadth of tools."

#: ../../source/guides/designing-the-delta-format.rst:39
msgid "We can add italics, underline, and other formats to the main object if we want to; but it is cleaner to separate ``text`` from all of this so we organize formatting under one field, which we will name ``attributes``."
msgstr "We can add italics, underline, and other formats to the main object if we want to; but it is cleaner to separate ``text`` from all of this so we organize formatting under one field, which we will name ``attributes``."

#: ../../source/guides/designing-the-delta-format.rst:52
msgid "Compact"
msgstr "Compact"

#: ../../source/guides/designing-the-delta-format.rst:54
msgid "Even with our simple Delta format so far, it is unpredictable since the above “Hello World” example can be represented differently, so we cannot predict which will be generated:"
msgstr "Even with our simple Delta format so far, it is unpredictable since the above “Hello World” example can be represented differently, so we cannot predict which will be generated:"

#: ../../source/guides/designing-the-delta-format.rst:66
msgid "To solve this, we add the constraint that Deltas must be compact. With this constraint, the above representation is not a valid Delta, since it can be represented more compactly by the previous example, where “Hel” and “lo” were not separate. Similarly we cannot have ``{ bold: false, italic: true, underline: null }``, because ``{ italic: true }`` is more compact."
msgstr "To solve this, we add the constraint that Deltas must be compact. With this constraint, the above representation is not a valid Delta, since it can be represented more compactly by the previous example, where “Hel” and “lo” were not separate. Similarly we cannot have ``{ bold: false, italic: true, underline: null }``, because ``{ italic: true }`` is more compact."

#: ../../source/guides/designing-the-delta-format.rst:74
msgid "Canonical"
msgstr "Canonical"

#: ../../source/guides/designing-the-delta-format.rst:76
msgid "We have not assigned any meaning to ``bold``, just that it describes some formatting for text. We could very well have used different names, such as ``weighted`` or ``strong``, or used a different range of possible values, such as a numerical or descriptive range of weights. An example can be found in CSS, where most of these ambiguities are at play. If we saw bolded text on a page, we cannot predict if its rule set is ``font-weight: bold`` or ``font-weight: 700``. This makes the task of parsing CSS to discern its meaning, much more complex."
msgstr "We have not assigned any meaning to ``bold``, just that it describes some formatting for text. We could very well have used different names, such as ``weighted`` or ``strong``, or used a different range of possible values, such as a numerical or descriptive range of weights. An example can be found in CSS, where most of these ambiguities are at play. If we saw bolded text on a page, we cannot predict if its rule set is ``font-weight: bold`` or ``font-weight: 700``. This makes the task of parsing CSS to discern its meaning, much more complex."

#: ../../source/guides/designing-the-delta-format.rst:85
msgid "We do not define the set of possible attributes, nor their meanings, but we do add an additional constraint that Deltas must be canonical. If two Deltas are equal, the content they represent must be equal, and there cannot be two unequal Deltas that represent the same content. Programmatically, this allows you to simply deep compare two Deltas to determine if the content they represent is equal."
msgstr "We do not define the set of possible attributes, nor their meanings, but we do add an additional constraint that Deltas must be canonical. If two Deltas are equal, the content they represent must be equal, and there cannot be two unequal Deltas that represent the same content. Programmatically, this allows you to simply deep compare two Deltas to determine if the content they represent is equal."

#: ../../source/guides/designing-the-delta-format.rst:92
msgid "So if we had the following, the only conclusion we can draw is ``a`` is different from ``b``, but not what ``a`` or ``b`` means."
msgstr "So if we had the following, the only conclusion we can draw is ``a`` is different from ``b``, but not what ``a`` or ``b`` means."

#: ../../source/guides/designing-the-delta-format.rst:105
msgid "It is up to the implementer to pick appropriate names:"
msgstr "It is up to the implementer to pick appropriate names:"

#: ../../source/guides/designing-the-delta-format.rst:117
msgid "This canonicalization applies to both keys and values, ``text`` and ``attributes``. For example, Quill by default:"
msgstr "This canonicalization applies to both keys and values, ``text`` and ``attributes``. For example, Quill by default:"

#: ../../source/guides/designing-the-delta-format.rst:120
msgid "Uses six character hex values to represent colors and not RGB"
msgstr "Uses six character hex values to represent colors and not RGB"

#: ../../source/guides/designing-the-delta-format.rst:121
msgid "There is only one way to represent a newline which is with ``\\n``, not ``\\r`` or ``\\r\\n``"
msgstr "There is only one way to represent a newline which is with ``\\n``, not ``\\r`` or ``\\r\\n``"

#: ../../source/guides/designing-the-delta-format.rst:123
msgid "text: “Hello  World” unambiguously means there are precisely two spaces between “Hello” and “World”"
msgstr "text: “Hello  World” unambiguously means there are precisely two spaces between “Hello” and “World”"

#: ../../source/guides/designing-the-delta-format.rst:126
msgid "Some of these choices may be customized by the user, but the canonical constraint in Deltas dictate that the choice must be unique."
msgstr "Some of these choices may be customized by the user, but the canonical constraint in Deltas dictate that the choice must be unique."

#: ../../source/guides/designing-the-delta-format.rst:129
msgid "This unambiguous predictability makes Deltas easier to work with, both because you have fewer cases to handle and because there are no surprises in what a corresponding Delta will look like. Long term, this makes applications using Deltas easier to understand and maintain."
msgstr "This unambiguous predictability makes Deltas easier to work with, both because you have fewer cases to handle and because there are no surprises in what a corresponding Delta will look like. Long term, this makes applications using Deltas easier to understand and maintain."

#: ../../source/guides/designing-the-delta-format.rst:135
msgid "Line Formatting"
msgstr "Line Formatting"

#: ../../source/guides/designing-the-delta-format.rst:137
msgid "Line formats affect the contents of an entire line, so they present an interesting challenge for our compact and canonical constraints. A seemingly reasonable way to represent centered text would be the following:"
msgstr "Line formats affect the contents of an entire line, so they present an interesting challenge for our compact and canonical constraints. A seemingly reasonable way to represent centered text would be the following:"

#: ../../source/guides/designing-the-delta-format.rst:149
msgid "But what if the user deletes the newline character? If we just naively get rid of the newline character, the Delta would now look like this:"
msgstr "But what if the user deletes the newline character? If we just naively get rid of the newline character, the Delta would now look like this:"

#: ../../source/guides/designing-the-delta-format.rst:159
msgid "Is this line still centered? If the answer is no, then our representation is not compact, since we do not need the attribute object and can combine the two strings:"
msgstr "Is this line still centered? If the answer is no, then our representation is not compact, since we do not need the attribute object and can combine the two strings:"

#: ../../source/guides/designing-the-delta-format.rst:169
msgid "But if the answer is yes, then we violate the canonical constraint since any permutation of characters having an align attribute would represent the same content."
msgstr "But if the answer is yes, then we violate the canonical constraint since any permutation of characters having an align attribute would represent the same content."

#: ../../source/guides/designing-the-delta-format.rst:173
msgid "So we cannot just naively get rid of the newline character. We also have to either get rid of line attributes, or expand them to fill all characters on the line."
msgstr "So we cannot just naively get rid of the newline character. We also have to either get rid of line attributes, or expand them to fill all characters on the line."

#: ../../source/guides/designing-the-delta-format.rst:177
msgid "What if we removed the newline from the following?"
msgstr "What if we removed the newline from the following?"

#: ../../source/guides/designing-the-delta-format.rst:187
msgid "It is not clear if our resulting line is aligned center or right. We could delete both or have some ordering rule to favor one over the other, but our Delta is becoming more complex and harder to work with on this path."
msgstr "It is not clear if our resulting line is aligned center or right. We could delete both or have some ordering rule to favor one over the other, but our Delta is becoming more complex and harder to work with on this path."

#: ../../source/guides/designing-the-delta-format.rst:192
msgid "This problem begs for atomicity, and we find this in the *newline* character itself. But we have an off by one problem in that if we have *n* lines, we only have *n-1* newline characters."
msgstr "This problem begs for atomicity, and we find this in the *newline* character itself. But we have an off by one problem in that if we have *n* lines, we only have *n-1* newline characters."

#: ../../source/guides/designing-the-delta-format.rst:196
msgid "To solve this, Quill “adds” a newline to all documents and always ends Deltas with “:raw-latex:`\\n`”."
msgstr "To solve this, Quill “adds” a newline to all documents and always ends Deltas with “:raw-latex:`\\n`”."

#: ../../source/guides/designing-the-delta-format.rst:210
msgid "Embedded Content"
msgstr "Embedded Content"

#: ../../source/guides/designing-the-delta-format.rst:212
msgid "We want to add embedded content like images or video. Strings were natural to use for text but we have a lot more options for embeds. Since there are different types of embeds, our choice just needs to include this type information, and then the actual content. There are many reasonable options here but we will use an object whose only key is the embed type and the value is the content representation, which may have any type or value."
msgstr "We want to add embedded content like images or video. Strings were natural to use for text but we have a lot more options for embeds. Since there are different types of embeds, our choice just needs to include this type information, and then the actual content. There are many reasonable options here but we will use an object whose only key is the embed type and the value is the content representation, which may have any type or value."

#: ../../source/guides/designing-the-delta-format.rst:232
msgid "Similar to text, images might have some defining characteristics, and some transient ones. We used ``attributes`` for text content and can use the same ``attributes`` field for images. But because of this, we can keep the general structure we have been using, but should rename our ``text`` key into something more general. For reasons we will explore later, we will choose the name ``insert``. Putting this all together we have:"
msgstr "Similar to text, images might have some defining characteristics, and some transient ones. We used ``attributes`` for text content and can use the same ``attributes`` field for images. But because of this, we can keep the general structure we have been using, but should rename our ``text`` key into something more general. For reasons we will explore later, we will choose the name ``insert``. Putting this all together we have:"

#: ../../source/guides/designing-the-delta-format.rst:255
msgid "Describing Changes"
msgstr "Describing Changes"

#: ../../source/guides/designing-the-delta-format.rst:257
msgid "As the name Delta implies, our format can describe changes to documents, as well as documents themselves. In fact we can think of documents as the changes we would make to the empty document, to get to the one we are describing. As you might have already guessed, using Deltas to also describe changes is why we renamed ``text`` to ``insert`` earlier. We call each element in our Delta array an Operation."
msgstr "As the name Delta implies, our format can describe changes to documents, as well as documents themselves. In fact we can think of documents as the changes we would make to the empty document, to get to the one we are describing. As you might have already guessed, using Deltas to also describe changes is why we renamed ``text`` to ``insert`` earlier. We call each element in our Delta array an Operation."

#: ../../source/guides/designing-the-delta-format.rst:267
msgid "To describe deleting text, we need to know where and how many characters to delete. To delete embeds, there needs not be any special treatment, other than to understand the length of an embed. If it is anything other than one, we would then need to specify what happens when only part of an embed is deleted. There is currently no such specification, so regardless of how many pixels make up an image, how many minutes long a video is, or how many slides are in a deck; embeds are all of length **one**."
msgstr "To describe deleting text, we need to know where and how many characters to delete. To delete embeds, there needs not be any special treatment, other than to understand the length of an embed. If it is anything other than one, we would then need to specify what happens when only part of an embed is deleted. There is currently no such specification, so regardless of how many pixels make up an image, how many minutes long a video is, or how many slides are in a deck; embeds are all of length **one**."

#: ../../source/guides/designing-the-delta-format.rst:276
msgid "One reasonable way to describe a deletion is to explicitly store its index and length."
msgstr "One reasonable way to describe a deletion is to explicitly store its index and length."

#: ../../source/guides/designing-the-delta-format.rst:293
msgid "We would have to order the deletions based on indexes, and ensure no ranges overlap, otherwise our canonical constraint would be violated. There are a couple other shortcomings to this index and length approach, but they are easier to appreciate after describing format changes."
msgstr "We would have to order the deletions based on indexes, and ensure no ranges overlap, otherwise our canonical constraint would be violated. There are a couple other shortcomings to this index and length approach, but they are easier to appreciate after describing format changes."

#: ../../source/guides/designing-the-delta-format.rst:301
msgid "Now that Deltas may be describing changes to a non-empty document, ``{ insert: \"Hello\" }`` is insufficient, because we do not know where “Hello” should be inserted. We can solve this by also adding an index, similar to ``delete``."
msgstr "Now that Deltas may be describing changes to a non-empty document, ``{ insert: \"Hello\" }`` is insufficient, because we do not know where “Hello” should be inserted. We can solve this by also adding an index, similar to ``delete``."

#: ../../source/guides/designing-the-delta-format.rst:309
msgid "Similar to deletes, we need to specify the range of text to format, along with the format change itself. Formatting exists in the ``attributes`` object, so a simple solution is to provide an additional ``attributes`` object to merge with the existing one. This merge is shallow to keep things simple. We have not found a use case that is compelling enough to require a deep merge and warrants the added complexity."
msgstr "Similar to deletes, we need to specify the range of text to format, along with the format change itself. Formatting exists in the ``attributes`` object, so a simple solution is to provide an additional ``attributes`` object to merge with the existing one. This merge is shallow to keep things simple. We have not found a use case that is compelling enough to require a deep merge and warrants the added complexity."

#: ../../source/guides/designing-the-delta-format.rst:329
msgid "The special case is when we want to remove formatting. We will use ``null`` for this purpose, so ``{ bold: null }`` would mean remove the bold format. We could have specified any falsy value, but there may be legitimate use cases for an attribute value to be ``0`` or the empty string."
msgstr "The special case is when we want to remove formatting. We will use ``null`` for this purpose, so ``{ bold: null }`` would mean remove the bold format. We could have specified any falsy value, but there may be legitimate use cases for an attribute value to be ``0`` or the empty string."

#: ../../source/guides/designing-the-delta-format.rst:335
msgid "**Note:** We now have to be careful with indexes at the application layer. As mentioned earlier, Deltas do not ascribe any inherent meaning to any the ``attributes``\\ ’ key-value pairs, nor any embed types or values. Deltas do not know an image does not have duration, text does not have alternative texts, and videos cannot be bolded. The following is a *legal* Delta that might have been the result of applying other *legal* Deltas, by an application not being careful of format ranges."
msgstr "**Note:** We now have to be careful with indexes at the application layer. As mentioned earlier, Deltas do not ascribe any inherent meaning to any the ``attributes``\\ ’ key-value pairs, nor any embed types or values. Deltas do not know an image does not have duration, text does not have alternative texts, and videos cannot be bolded. The following is a *legal* Delta that might have been the result of applying other *legal* Deltas, by an application not being careful of format ranges."

#: ../../source/guides/designing-the-delta-format.rst:369
msgid "First, we should be clear that an index must refer to its position in the document **before** any Operations are applied. Otherwise, a later Operation may delete a previous insert, unformat a previous format, etc., which would violate compactness."
msgstr "First, we should be clear that an index must refer to its position in the document **before** any Operations are applied. Otherwise, a later Operation may delete a previous insert, unformat a previous format, etc., which would violate compactness."

#: ../../source/guides/designing-the-delta-format.rst:374
msgid "Operations must also be strictly ordered to satisfy our canonical constraint. Ordering by index, then length, and then type is one valid way this can be accomplished."
msgstr "Operations must also be strictly ordered to satisfy our canonical constraint. Ordering by index, then length, and then type is one valid way this can be accomplished."

#: ../../source/guides/designing-the-delta-format.rst:378
msgid "As stated earlier, delete ranges cannot overlap. The case against overlapping format ranges is less brief, but it turns out we do not want overlapping formats either."
msgstr "As stated earlier, delete ranges cannot overlap. The case against overlapping format ranges is less brief, but it turns out we do not want overlapping formats either."

#: ../../source/guides/designing-the-delta-format.rst:382
msgid "The number of reasons a Delta might be invalid is piling up. A better format would simply not allow such cases to be expressed at all."
msgstr "The number of reasons a Delta might be invalid is piling up. A better format would simply not allow such cases to be expressed at all."

#: ../../source/guides/designing-the-delta-format.rst:388
msgid "If we step back from our compactness formalities for a moment, we can describe a much simpler format to express inserting, deleting, and formatting:"
msgstr "If we step back from our compactness formalities for a moment, we can describe a much simpler format to express inserting, deleting, and formatting:"

#: ../../source/guides/designing-the-delta-format.rst:392
msgid "A Delta would have Operations that are at least as long as the document being modified."
msgstr "A Delta would have Operations that are at least as long as the document being modified."

#: ../../source/guides/designing-the-delta-format.rst:394
msgid "Each Operation would describe what happens to the character at that index."
msgstr "Each Operation would describe what happens to the character at that index."

#: ../../source/guides/designing-the-delta-format.rst:396
msgid "Optional insert Operations may make the Delta longer than the document it describes."
msgstr "Optional insert Operations may make the Delta longer than the document it describes."

#: ../../source/guides/designing-the-delta-format.rst:399
msgid "This necessitates the creation of a new Operation, that will simply mean “keep this character as is”. We call this a ``retain``."
msgstr "This necessitates the creation of a new Operation, that will simply mean “keep this character as is”. We call this a ``retain``."

#: ../../source/guides/designing-the-delta-format.rst:420
msgid "Since every character is described, explicit indexes and lengths are no longer necessary. This makes overlapping ranges and out-of-order indexes impossible to express."
msgstr "Since every character is described, explicit indexes and lengths are no longer necessary. This makes overlapping ranges and out-of-order indexes impossible to express."

#: ../../source/guides/designing-the-delta-format.rst:424
msgid "Therefore, we can make the easy optimization to merge adjacent equal Operations, re-introducing *length*. If the last Operation is a ``retain`` we can simply drop it, for it simply instructs to “do nothing to the rest of the document”."
msgstr "Therefore, we can make the easy optimization to merge adjacent equal Operations, re-introducing *length*. If the last Operation is a ``retain`` we can simply drop it, for it simply instructs to “do nothing to the rest of the document”."

#: ../../source/guides/designing-the-delta-format.rst:436
msgid "Furthermore, you might notice that a ``retain`` is in some ways just a special case of ``format``. For instance, there is no practical difference between ``{ format: 1, attributes: {} }`` and ``{ retain: 1 }``. Compacting would drop the empty ``attributes`` object leaving us with just ``{ format: 1 }``, creating a canonicalization conflict. Thus, in our example we will simply combine ``format`` and ``retain``, and keep the name ``retain``."
msgstr "Furthermore, you might notice that a ``retain`` is in some ways just a special case of ``format``. For instance, there is no practical difference between ``{ format: 1, attributes: {} }`` and ``{ retain: 1 }``. Compacting would drop the empty ``attributes`` object leaving us with just ``{ format: 1 }``, creating a canonicalization conflict. Thus, in our example we will simply combine ``format`` and ``retain``, and keep the name ``retain``."

#: ../../source/guides/designing-the-delta-format.rst:451
msgid "We now have a Delta that is very close to the current standard format."
msgstr "We now have a Delta that is very close to the current standard format."

#: ../../source/guides/designing-the-delta-format.rst:456
msgid "Right now we have an easy to use JSON Array that describes rich text. This is great at the storage and transport layers, but applications could benefit from more functionality. We can add this by implementing Deltas as a class, that can be easily initialized from or exported to JSON, and then providing it with relevant methods."
msgstr "Right now we have an easy to use JSON Array that describes rich text. This is great at the storage and transport layers, but applications could benefit from more functionality. We can add this by implementing Deltas as a class, that can be easily initialized from or exported to JSON, and then providing it with relevant methods."

#: ../../source/guides/designing-the-delta-format.rst:462
msgid "At the time of Delta’s inception, it was not possible to sub-class an Array. For this reason Deltas are expressed as Objects, with a single property ``ops`` that stores an array of Operations like the ones we have been discussing."
msgstr "At the time of Delta’s inception, it was not possible to sub-class an Array. For this reason Deltas are expressed as Objects, with a single property ``ops`` that stores an array of Operations like the ones we have been discussing."

#: ../../source/guides/designing-the-delta-format.rst:483
msgid "Finally, we arrive at the `Delta format </docs/delta/>`__, as it exists today."
msgstr "Finally, we arrive at the `Delta format </docs/delta/>`__, as it exists today."

